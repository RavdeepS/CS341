#include <iostream>
#include <cassert>
using namespace std;

struct HanoiRecord {
    int _numberDisks;
    int _sourcePole, _sparePole, _destinationPole;

    // Constructors
    HanoiRecord() : _numberDisks(3), _sourcePole(1), _sparePole(2), _destinationPole(3) {}
    HanoiRecord(int numberDisks, int sourcePole, int sparePole, int destinationPole)
        : _numberDisks(numberDisks), _sourcePole(sourcePole), _sparePole(sparePole), _destinationPole(destinationPole) {}
};

class stack {
private:
    struct HanoiRecordLink {
        HanoiRecord value;
        HanoiRecordLink *next;
    };
    HanoiRecordLink *_top;

public:
    stack() : _top(nullptr) {}

    void push(HanoiRecord record) {
        HanoiRecordLink *newLink = new HanoiRecordLink;
        newLink->value = record;
        newLink->next = _top;
        _top = newLink;
    }

    HanoiRecord pop() {
        assert(_top != nullptr && "Stack underflow");
        HanoiRecordLink *temp = _top;
        HanoiRecord record = _top->value;
        _top = _top->next;
        delete temp;
        return record;
    }

    HanoiRecord top() {
        assert(_top != nullptr && "Stack is empty");
        return _top->value;
    }

    bool is_empty() {
        return _top == nullptr;
    }
};

int main() {
    int numberOfDisks = 0;
    cout << "How many disks? ";
    cin >> numberOfDisks;

    stack HanoiStack;
    HanoiStack.push(HanoiRecord(numberOfDisks, 1, 2, 3));  // Initialize with the full problem state

    while (!HanoiStack.is_empty()) {
        HanoiRecord current = HanoiStack.pop();

        if (current._numberDisks == 1) {
            cout << "Move disk from pole " << current._sourcePole << " to pole " << current._destinationPole << endl;
        } else {
            // Push in reverse order to simulate recursive calls
            HanoiStack.push(HanoiRecord(current._numberDisks - 1, current._sparePole, current._sourcePole, current._destinationPole));
            HanoiStack.push(HanoiRecord(1, current._sourcePole, current._sparePole, current._destinationPole));
            HanoiStack.push(HanoiRecord(current._numberDisks - 1, current._sourcePole, current._destinationPole, current._sparePole));
        }
    }

    return 0;
}
